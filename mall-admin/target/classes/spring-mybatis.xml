<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://www.springframework.org/schema/task 
                       	http://www.springframework.org/schema/task/spring-task-3.0.xsd    
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd
                         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx.xsd">
	<!-- 自动扫描 -->
	<context:component-scan base-package="com.xy.service.impl" />
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:config.properties" />
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="url" value="${jdbc.url}" />
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="filters" value="${jdbc.filters}" />
		<!-- 最大并发连接数 -->
		<property name="maxActive" value="${jdbc.maxActive}" />
		<!-- 初始化连接数量 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<!-- 配置获取连接等待超时的时间 -->
		<!-- <property name="maxWait" value="${jdbc.maxWait}" />-->
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		<property name="validationQuery" value="${jdbc.validationQuery}" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		<property name="maxOpenPreparedStatements" value="${jdbc.maxOpenPreparedStatements}" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${jdbc.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${jdbc.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${jdbc.logAbandoned}" />
	</bean>

	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations">
			<array>
				<value>classpath*:mapper/*.xml</value>
			</array>
		</property>
		<property name="plugins">
			<array>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=MySQL
							offsetAsPageNum=true
							rowBoundsWithCount=true
							pageSizeZero=true
							reasonable=true
							params=pageNum=start;pageSize=limit;pageSizeZero=zero;reasonable=heli;count=contsql
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>

	<!--定时任务-->
	<!--<bean id="jobx"-->
		  <!--class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">-->
		<!--<property name="targetObject">-->
			<!--<bean class="com.djfy.intercept.TimerManager" />-->
		<!--</property>-->
		<!--<property name="targetMethod" value="doJob" />-->
		<!--<property name="concurrent" value="false" />&lt;!&ndash; 作业不并发调度 &ndash;&gt;-->
	<!--</bean>-->
	<!--<bean id="simpleTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobx" />-->
		<!--<property name="startDelay" value="1000" />&lt;!&ndash; 调度工厂实例化后，经过0秒开始执行调度 &ndash;&gt;-->
		<!--<property name="repeatInterval" value="30000" />&lt;!&ndash; 每2秒调度一次 &ndash;&gt;-->
	<!--</bean>-->

	<!--<bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">-->
		<!--<property name="jobDetail" ref="jobx" />-->
		<!--&lt;!&ndash;每天23:59运行一次 &ndash;&gt;-->
		<!--<property name="cronExpression" value="0 59 23 * * ?" />-->
	<!--</bean>-->
	<!--<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">-->
		<!--<property name="triggers">-->
			<!--<list>-->
				<!--<ref bean="cronTrigger" />-->
			<!--</list>-->
		<!--</property>-->
	<!--</bean>-->

	<!-- redis -->
	<!--配置 jedis pool-->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="${redis.pool.maxTotal}"/>
		<!-- 最大空闲时间 -->
		<property name="maxIdle" value="${redis.pool.maxIdle}"/>
		<!-- 每次最大连接数 -->
		<property name="numTestsPerEvictionRun" value="${redis.pool.numTestsPerEvictionRun}"/>
		<!-- 释放扫描的扫描间隔 -->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.pool.timeBetweenEvictionRunsMillis}"/>
		<!-- 连接的最小空闲时间 -->
		<property name="minEvictableIdleTimeMillis" value="${redis.pool.minEvictableIdleTimeMillis}"/>
		<!-- 连接控歘按时间多久后释放，当空闲时间>该值且空闲连接>最大空闲连接数时直接释放 -->
		<property name="softMinEvictableIdleTimeMillis" value="${redis.pool.softMinEvictableIdleTimeMillis}"/>
		<!-- 获得链接时的最大等待毫秒数，小于0：阻塞不确定时间，默认-1 -->
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}"/>
		<!-- 在获得链接的时候检查有效性，默认false -->
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}"/>
		<!-- 在空闲时检查有效性，默认false -->
		<property name="testWhileIdle" value="${redis.pool.testWhileIdle}"/>
		<!-- 连接耗尽时是否阻塞，false报异常，true阻塞超时 默认：true-->
		<property name="blockWhenExhausted" value="${redis.pool.blockWhenExhausted}"/>
	</bean>

	<!--spring data redis -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.hostName}"/>
		<property name="port" value="${redis.port}"/>
		<property name="timeout" value="${redis.timeout}"/>
		<property name="database" value="${redis.dbIndex}"/>
		<property name="usePool" value="${redis.usePool}"/>
		<!--<property name="password" value="${redis.password}"/>-->

		<!--可以通过构造注入或者Set注入两种方式-->
		<property name="poolConfig" ref="jedisPoolConfig"/>
	</bean>

	<!--StringRedisTemplate-->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory"/>
	</bean>

	<!-- redis -->

	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.xy.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	</bean>
	
 	<!--配置事务管理器(mybatis采用的是JDBC的事务管理器)-->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--配置基于注解的声明式事务,默认使用注解来管理事务行为 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
	 <!-- spring扫描注解的配置 -->
    <task:annotation-driven />
</beans>  