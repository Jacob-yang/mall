<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans    
                        http://www.springframework.org/schema/beans/spring-beans.xsd    
                        http://www.springframework.org/schema/context    
                        http://www.springframework.org/schema/context/spring-context.xsd   
                        http://www.springframework.org/schema/util 
                        http://www.springframework.org/schema/util/spring-util.xsd 
                        http://www.springframework.org/schema/mvc    
                        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
	<!-- json 不返回null  需要放到   <mvc:annotation-driven/> 前 -->
	<!--  <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                    <property name="objectMapper">
                        <bean id="jacksonObjectMapper" class="com.fasterxml.jackson.databind.ObjectMapper">
                            <property name="dateFormat">
                                <bean class="java.text.SimpleDateFormat">
                                    <constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
                                </bean>
                            </property>
                            <property name="serializationInclusion">-->
                                <!-- 把枚举类型转为一个bean才能注入, 不序列化空值属性 -->
                                <!-- <value type="com.fasterxml.jackson.annotation.JsonInclude.Include">NON_NULL</value> -->
                              <!--  <util:constant static-field="com.fasterxml.jackson.annotation.JsonInclude.Include.NON_NULL" />
                            </property>
                        </bean>                       
                    </property>
                </bean>
            </list>
        </property>
    </bean> --> 
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
   <mvc:message-converters register-defaults="true">
      <!-- 将Jackson2HttpMessageConverter的默认格式化输出为true -->
      <!-- 配置Fastjson支持 -->
      <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
         <property name="supportedMediaTypes">
            <list>
               <value>text/html;charset=UTF-8</value>
               <value>application/json</value>
            </list>
         </property>
         <property name="features">
            <list>
               <!-- 输出key时是否使用双引号 -->
               <value>QuoteFieldNames</value>
               <!-- 是否输出值为null的字段 -->
               <!-- <value>WriteMapNullValue</value> -->
               <!-- 数值字段如果为null,输出为0,而非null -->
               <value>WriteNullNumberAsZero</value>
               <!-- List字段如果为null,输出为[],而非null -->
               <value>WriteNullListAsEmpty</value>
               <!-- 字符类型字段如果为null,输出为"",而非null -->
               <value>WriteNullStringAsEmpty</value>
               <!-- Boolean字段如果为null,输出为false,而非null -->
               <value>WriteNullBooleanAsFalse</value>
               <!-- null String不输出  -->
               <value>WriteNullStringAsEmpty</value>
               <!-- null String也要输出  -->
               <!-- <value>WriteMapNullValue</value> -->
               
               <!-- Date的日期转换器 -->
               <value>WriteDateUseDateFormat</value>
            </list>
         </property>
      </bean>
   </mvc:message-converters>
</mvc:annotation-driven>

<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
   <property name="mediaTypes" >
      <map>
         <entry key="json" value="application/json"/>
      </map>
   </property>
   <!-- 这里是否忽略掉accept header，默认就是false -->
   <property name="ignoreAcceptHeader" value="true"/>
   <property name="favorPathExtension" value="true"/>
</bean>
	
	 <!--配置springmvc-->
    <!--1:开始SpringMVC注解模式-->
    <!--简化配置：-->
    <!--1）自动注册DefaultAnnotationHandlerMapping,AnnotationMethodHandlerAdapter-->
    <!--2）提供一些列：数据绑定，数字和日期的format @NumberFormat @DataTimeFormart，xml,json 默认读写支持。-->
    <mvc:annotation-driven/>
    <!--2.静态资源默认servlet配置-->
    <!--
        1).加入对静态资源处理：js,gif,png
        2).允许使用 "/" 做整体映射
    -->
    <mvc:default-servlet-handler/>

    <!-- static resources -->
    <mvc:resources location="/static/" mapping="/static/**" cache-period="864000"/>
    <!-- 24 * 3600 * 10 -->

    <!--3：配置freemarker 显示ViewResolver-->
    <!-- freemarker的配置 -->
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/ftl/"/>
        <property name="defaultEncoding" value="utf-8"/>
        <property name="freemarkerSettings">
            <props>
                <!-- 用来指定更新模版文件的间隔时间，相当于多长时间检测一下是否有必要重新加载模版文件， 0 表示每次都重新加载，否则为多少毫秒钟检测一下模版是否更改
                     -->
                <prop key="template_update_delay">10</prop>
                <prop key="locale">zh_CN</prop>
                <prop key="defaultEncoding">UTF-8</prop>
                <prop key="url_escaping_charset">UTF-8</prop>
                <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
                <prop key="date_format">yyyy-MM-dd</prop>
                <prop key="number_format">#.##</prop>
                <prop key="whitespace_stripping">true</prop>
                <!--空值处理  -->
                <prop key="classic_compatible">true</prop>
                <prop key="boolean_format">true,false</prop>
            </props>
        </property>
    </bean>

    <!-- FreeMarker视图解析 ，在这里配置后缀名ftl和视图解析器。。-->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
       <property name="viewClass" value="com.xy.util.MyFreeMarkerView"/>

        <property name="cache" value="false"/>
        <property name="prefix" value=""/>
        <property name="suffix" value=".ftl"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="requestContextAttribute" value="request"/>
        <property name="contentType" value="text/html;charset=UTF-8"/>
        <property name="order" value="0"/>
    </bean>
	
	<!-- 配置文件上传，如果没有使用文件上传可以不用配置，当然如果不配，那么配置文件中也不必引入上传组件包 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 默认编码 -->
		<property name="defaultEncoding" value="utf-8" />
		<!-- 文件大小最大值 -->
		<property name="maxUploadSize" value="10485760000" />
		<!-- 内存中的最大值 -->
		<property name="maxInMemorySize" value="40960" />
	</bean>

	<!-- 登陆拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/sys/**" />
			<bean class="com.xy.intercept.LoginIntercept">
			</bean>
		</mvc:interceptor>

        <!--<mvc:interceptor>-->
            <!--<mvc:mapping path="/api/**" />-->
            <!--&lt;!&ndash; 需排除拦截的地址 &ndash;&gt;-->
            <!--<mvc:exclude-mapping path="/api/agency/add" />-->
            <!--<bean class="com.xy.intercept.ApiIntercept">-->
            <!--</bean>-->
        <!--</mvc:interceptor>-->
	</mvc:interceptors>
	
	<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->
	<context:component-scan base-package="com.xy.controller" />
</beans>